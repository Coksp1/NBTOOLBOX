function makeGUI(gui)
% Syntax:
%
% makeGUI(gui)
%
% Description:
%
% Part of DAG. Makes the window for unit root tests.
% 
% Written by Eyo Herstad

% Copyright (c) 2023, Kenneth SÃ¦terhagen Paulsen

    % Create Window
    %--------------------------------------------------------------
    gui.unitRootWindow = nb_guiFigure(gui.parent,'Unit Root Test',[50 40 80 30],'modal','off');
  
    % Create Panels
    %--------------------------------------------------------------
    % Positions
    xSpace = 0.05;
    ySpace = 0.05;
    testPanelHeight = 0.15;
    testPanelWidth  = (1 - ySpace*3)/2;
    panelStart = 0.17;
    testPanelStart = 1 - ySpace - testPanelHeight;
    panelWidth = (1 - ySpace*3)/2;
    rightPanelHeight = 1 - panelStart - ySpace*2 -testPanelHeight;
    leftPanelHeight = rightPanelHeight/2 - 0.0125;
    rightPanelxStart = 1-xSpace - panelWidth;
    leftPanelStart2 = panelStart + leftPanelHeight + 0.025;
    buttonWidth = 0.2;
    buttonHeight = 0.08;
    buttonStart1 = 1 - xSpace - buttonWidth;
    buttonStart2 = buttonStart1 - xSpace - buttonWidth;
    
    testTypePanel = uipanel(gui.unitRootWindow,...
        'title',        'Test',...
        'units',        'normal',...
        'position',     [xSpace testPanelStart testPanelWidth testPanelHeight]);
    
    levelDiffPanel = uibuttongroup(gui.unitRootWindow,...
        'title',                'Transformation',...
        'units',                'normal',...
        'SelectionChangeFcn',   '',...
        'position',             [xSpace panelStart panelWidth leftPanelHeight]);
    
    interceptPanel = uibuttongroup(gui.unitRootWindow,...
        'title',                'Equation assumption',...
        'units',                'normal',...
        'SelectionChangeFcn',   '',...
        'position',             [xSpace leftPanelStart2 panelWidth leftPanelHeight]);
    
    lagLengthPanel = uibuttongroup(gui.unitRootWindow,...
        'units',                'normal',...
        'title',                'Lag length',...
        'SelectionChangeFcn',   @gui.lagLengthCallback,...
        'position',             [rightPanelxStart panelStart panelWidth rightPanelHeight]);
    
    spectralPanel = uipanel(gui.unitRootWindow,...
        'title',                'Spectral estimation',...
        'units',                'normal',...
        'position',             [rightPanelxStart panelStart+rightPanelHeight*3/4+0.01 panelWidth rightPanelHeight/4],...
        'visible',              'off');
    
    bandwidthPanel = uibuttongroup(gui.unitRootWindow,...
        'title',                'Bandwidth',...
        'units',                'normal',...
        'SelectionChangeFcn',   @gui.bandwidthCallback,...
        'position',             [rightPanelxStart panelStart panelWidth rightPanelHeight*3/4],...
        'visible',              'off');
    
    % Create buttons
    uicontrol(gui.unitRootWindow,...
        'style',        'pushbutton',...
        'units',        'normal',...
        'position',     [buttonStart1 ySpace buttonWidth buttonHeight],...
        'string',       'Cancel',...
        'callback',      @gui.exit);
    
    uicontrol(gui.unitRootWindow,...
        'style',        'pushbutton',...
        'units',        'normal',...
        'position',     [buttonStart2 ySpace buttonWidth buttonHeight],...
        'string',       'OK',...
        'callback',      @gui.okCallback);
    
    % Start date
    datesT = dates(gui.data);
    
    dateTextX   = rightPanelxStart;
    textLength  = 0.2;
    dateSelectX = rightPanelxStart + textLength;
    textHeight  = 0.08;
    dateTextY   = testPanelStart + textHeight - 0.01;
    extra       = 0.005;
    
    uicontrol(gui.unitRootWindow,...
        'style',        'text',...
        'units',        'normal',...
        'string',       'Start Date',...
        'position',     [dateTextX, dateTextY - extra, textLength, textHeight]);
    
    
    startDate = uicontrol(gui.unitRootWindow,...
        'style',        'popupmenu',...
        'background',   [1 1 1],...
        'units',        'normal',...
        'string',       datesT,...
        'value',        1,...
        'position',     [dateSelectX, dateTextY, textLength, textHeight]);
    
    % End date
    uicontrol(gui.unitRootWindow,...
        'style',        'text',...
        'units',        'normal',...
        'string',       'End Date',...
        'position',     [dateTextX, dateTextY - textHeight  - extra, textLength, textHeight]);
    
    endDate = uicontrol(gui.unitRootWindow,...
        'style',        'popupmenu',...
        'background',   [1 1 1],...
        'units',        'normal',...
        'string',       flipud(datesT),...
        'value',        1,...
        'position',     [dateSelectX, dateTextY - textHeight, textLength, textHeight]);
    
    % A variable or all
    vars = ['all',gui.data.variables];
    uicontrol(gui.unitRootWindow,...
        'style',        'text',...
        'units',        'normal',...
        'string',       'Variable(s)',...
        'position',     [0.015, 0.02, textLength, textHeight]);
    
    variable = uicontrol(gui.unitRootWindow,...
        'style',        'popupmenu',...
        'background',   [1 1 1],...
        'units',        'normal',...
        'string',       vars,...
        'value',        1,...
        'position',     [0.02 + textLength, 0.02, textLength, textHeight]);
    
    % Populate panels/buttongroups
    %-------------------------------------------------------------
    
    % Type panel
    typeList = {'Augmented Dickey-Fuller'; 'Phillips-Perron'};%;'Kwiatkowski-Phillips-Schmidt-Shin'
    gui.testTypeBox = uicontrol(testTypePanel,...
        'style',        'popupmenu',...
        'background',   [1 1 1],...
        'units',        'normal',...
        'string',       typeList,...
        'position',     [xSpace 0.3 0.9 0.5],...
        'callback',     @gui.switchPanel);
    
    % Level buttongroup
    rButtonHeight = 0.25;
    rButtonWidth  = 0.8;
    spaceY = 0.08;
    rButtonLevel1 = spaceY + rButtonHeight + spaceY;
    rButtonLevel2 = rButtonLevel1 + rButtonHeight + spaceY;
    boxWidth = 1 - rButtonWidth;
    boxHeight = 0.1;
    boxStart = 0.7;
    
    levelBtn = uicontrol(levelDiffPanel,...
        'style',        'radiobutton',...
        'string',       'Level',...
        'units',        'normal',...
        'position',     [xSpace rButtonLevel2 rButtonWidth rButtonHeight]);
   diff1Btn = uicontrol(levelDiffPanel,...
        'style',        'radiobutton',...
        'string',       '1st difference',...
        'units',        'normal',...
        'position',     [xSpace rButtonLevel1 rButtonWidth rButtonHeight]);
   diff2Btn = uicontrol(levelDiffPanel,...
        'style',        'radiobutton',...
        'string',       '2nd difference',...
        'units',        'normal',...
        'position',     [xSpace spaceY rButtonWidth rButtonHeight]);
    
    % Intercept panel
    interceptBtn = uicontrol(interceptPanel,...
        'style',        'radiobutton',...
        'string',       'Intercept',...
        'units',        'normal',...
        'position',     [xSpace rButtonLevel2 rButtonWidth rButtonHeight]);
   trendInterceptBtn = uicontrol(interceptPanel,...
        'style',        'radiobutton',...
        'string',       'Trend and Intercept',...
        'units',        'normal',...
        'position',     [xSpace rButtonLevel1 rButtonWidth rButtonHeight]);
   noTrendInterceptBtn = uicontrol(interceptPanel,...
        'style',        'radiobutton',...
        'string',       'None',...
        'units',        'normal',...
        'position',     [xSpace spaceY rButtonWidth rButtonHeight]);
    
    % Lag panel
    yLevel1 = 1-rButtonHeight/2-0.02;
    yLevel2 = yLevel1 - rButtonHeight/2 - 0.02;
    yLevel3 = yLevel2 - rButtonHeight/2 -0.03;
    bLevel1 = 1-rButtonHeight/2*3/2-0.02;
    bLevel2 = bLevel1-rButtonHeight/2*3/2-0.02;
    
    criteriaList = {'Akaike information criterion';...
        'Modified Akaike information criterion';...
        'Schwarz information criterion';...
        'Modified Schwarz information criterion';...
        'Hannan-Quinn information criterion';...
        'Modified Hannan-Quinn information criterion'...
        };
    
    autSelectBtn = uicontrol(lagLengthPanel,...
        'style',                'radiobutton',...
        'string',               'Automatic selection',...
        'units',                'normal',...
        'position',             [xSpace yLevel1 rButtonWidth rButtonHeight/2]);
    criterionBox = uicontrol(lagLengthPanel,...
        'style',                'popupmenu',...
        'background',           [1 1 1],...
        'string',               criteriaList,...
        'units',                'normal',...
        'position',             [xSpace yLevel2 rButtonWidth rButtonHeight/2]);
    maxText = uicontrol(lagLengthPanel,...
        'style',                'text',...
        'string',               'Maximum: ',...
        'horizontalAlignment',  'left',...
        'units',                'normal',...
        'position',             [xSpace+0.1 yLevel3 rButtonWidth boxHeight-0.02]);
    maxLagLengthBox = uicontrol(lagLengthPanel,...
        'style',                'edit',...
        'string',               '11',...
        'units',                'normal',...
        'background',           [1 1 1],...
        'position',             [boxStart yLevel3 boxWidth boxHeight]);
    userSelectBtn = uicontrol(lagLengthPanel,...
        'style',                'radiobutton',...
        'string',               'User specified: ',...
        'units',                'normal',...
        'position',             [xSpace spaceY rButtonWidth rButtonHeight/2]);
    userLagSelect = uicontrol(lagLengthPanel,...
        'style',                'edit',...
        'string',               '2',...
        'units',                'normal',...
        'enable',               'off',...
        'background',           [1 1 1],...
        'position',             [boxStart spaceY boxWidth boxHeight]);
    
    % Spectral panel
    spectralList = {'Bartlett kernel','Parzen kernel','Quadratic spectral kernel'};
    kernelBox = uicontrol(spectralPanel,...
        'style',        'popupmenu',...
        'units',        'normal',...
        'string',       spectralList,...
        'background',   [1 1 1],...
        'position',     [0.05 0.1 0.9 0.7]);
    
    % Bandwidth panel
    methodList = {'Newey-West Bandwidth';'Andrews Bandwidth'};
    
    autSelectBtn2 = uicontrol(bandwidthPanel,...
        'style',        'radiobutton',...
        'string',       'Automatic Selection:',...
        'units',        'normal',...
        'position',     [xSpace bLevel1 rButtonWidth rButtonHeight/2*3/2]);
    methodSelectBox = uicontrol(bandwidthPanel,...
        'style',        'popupmenu',...
        'background',	[1 1 1],...
        'string',       methodList,...
        'units',        'normal',...
        'position',     [xSpace bLevel2 rButtonWidth rButtonHeight/2*3/2]);
    
    userSelectBtn2 = uicontrol(bandwidthPanel,...
        'style',        'radiobutton',...
        'string',       'User specified: ',...
        'units',        'normal',...
        'position',     [xSpace spaceY*3/2 rButtonWidth rButtonHeight/2*3/2]);
    
    bandwidthSelectBox = uicontrol(bandwidthPanel,...
        'style',        'edit',...
        'string',       '3',...
        'units',        'normal',...
        'enable',       'off',...
        'background',	[1 1 1],...
        'position',     [boxStart spaceY*3/2 boxWidth boxHeight*3/2]);
        
    
    
    % Assign panels to structure
    %----------------------------------------------------------------
    gui.unitRootPanels.levelDiffPanel   = levelDiffPanel;
    gui.unitRootPanels.interceptPanel   = interceptPanel;
    gui.unitRootPanels.lagLengthPanel   = lagLengthPanel;
    gui.unitRootPanels.spectralPanel    = spectralPanel;
    gui.unitRootPanels.bandwidthPanel   = bandwidthPanel;
    
    gui.windowComponents.startDate   = startDate;
    gui.windowComponents.endDate     = endDate;
    gui.windowComponents.variable    = variable;
    
    % Assign components to structures
    %---------------------------------------------------------------
    gui.levelPanelComponents.levelBtn       = levelBtn;
    gui.levelPanelComponents.diff1Btn       = diff1Btn;
    gui.levelPanelComponents.diff2Btn       = diff2Btn;
    
    gui.interceptPanelComponents.interceptBtn        = interceptBtn;
    gui.interceptPanelComponents.trendInterceptBtn   = trendInterceptBtn;
    gui.interceptPanelComponents.noTrendInterceptBtn = noTrendInterceptBtn;
    
    gui.lagPanelComponents.autSelectBtn     = autSelectBtn;
    gui.lagPanelComponents.criterionBox     = criterionBox;
    gui.lagPanelComponents.maxText          = maxText; 
    gui.lagPanelComponents.maxLagLengthBox  = maxLagLengthBox;
    gui.lagPanelComponents.userSelectBtn    = userSelectBtn;
    gui.lagPanelComponents.userLagSelect    = userLagSelect;
    
    gui.bandwidthComponents.autSelectBtn        = autSelectBtn2; 
    gui.bandwidthComponents.methodSelectBox     = methodSelectBox;
    gui.bandwidthComponents.userSelectBtn       = userSelectBtn2;
    gui.bandwidthComponents.bandwidthSelectBox  = bandwidthSelectBox;
    gui.bandwidthComponents.kernelBox           = kernelBox;
    
    % Make the GUI visible.
    %--------------------------------------------------------------
    set(gui.unitRootWindow,'Visible','on');
    
end

