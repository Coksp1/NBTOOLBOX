function xAxisPanel(gui)
% Syntax:
%
% xAxisPanel(gui)
%
% Description:
%
% Part of DAG. Creates the panel with the x-axis properties.
% 
% Written by Kenneth Sæterhagen Paulsen

% Copyright (c) 2023, Kenneth Sæterhagen Paulsen

    % Get graph object 
    plotter = gui.plotter;
    
    % Create panel
    %--------------------------------------------------------------
    uip = uipanel(gui.buttonPanel,...
        'button',     'X-Axis',...
        'title',      '',...
        'borderType', 'none'); 
    gui.panelHandle1 = uip;
    
    % Check which type of panel we are going to have
    %--------------------------------------------------------------
    cl = class(plotter);
    switch cl
        case {'nb_graph_ts','nb_graph_bd'}
            
            if strcmpi(plotter.plotType,'scatter')
                type = 2;
            else
                type = 1;
            end
            
        case 'nb_graph_data'
            
            if strcmpi(plotter.plotType,'scatter')  
                type = 2;
            elseif ~isempty(plotter.variableToPlotX)
                type = 2;
            else
                type = 4;
            end 
            
        case 'nb_graph_cs'
            
            if strcmpi(plotter.plotType,'scatter')
                type = 2;
            else
                type = 3;
            end
            
    end
    
    % Panel for setting x-axis limits
    %--------------------------------------------------------------
    if type == 1 || type == 4
        
        % We want to return local variables if used
        plotter.setSpecial('returnLocal',1);
        
        start = plotter.startGraph;
        if isa(start,'nb_date') || isnumeric(start)
            start = toString(start);
        end
        
        finish = plotter.endGraph;
        if isa(finish,'nb_date') || isnumeric(finish)
            finish = toString(finish);
        end
        
        % We must reset the returnLocal property, so everything
        % works as it suposed.
        plotter.setSpecial('returnLocal',0);
        
        firstPanelStart = 0.75;
        
        % Set x-axis visible range
        %----------------------------------------------------------
        uipvr = uipanel('parent',              uip,...
                        'title',               'Visible range',...
                        'units',               'normalized',...
                        'position',            [0.04, firstPanelStart, 0.92, 0.21]);

        % Add uicontrol elements to change the startGraph property
        %----------------------------------------------------------
        if get(plotter,'manuallySetStartGraph')
            enable = 'on';
            valueR = 1;
        else
            enable = 'off';
            valueR = 0;
        end
        
        uicontrol(...
                        'units',                'normalized',...
                        'position',             [0.04, 0.36, 0.15, 0.2],...
                        'parent',               uipvr,...
                        'style',                'text',...
                        'horizontalAlignment',  'left',...
                        'string',               'Start:'); 

        pmhsg = uicontrol('units',                'normalized',...
                          'position',             [0.2, 0.36, 0.30, 0.2],...
                          'parent',               uipvr,...
                          'style',                'edit',...
                          'background',           [1 1 1],...
                          'Interruptible',        'off',...
                          'horizontalAlignment',  'left',...
                          'enable',               enable,...
                          'string',               start,...
                          'callback',             @gui.setStartGraph);  
        gui.editBox1 = pmhsg;
                      
        % Add uicontrol elements to change the endGraph property 
        %----------------------------------------------------------
        if get(plotter,'manuallySetEndGraph')
            enable = 'on';
            valueRE = 1;
        else
            enable = 'off';
            valueRE = 0;
        end
        
        uicontrol(...
                        'units',                'normalized',...
                        'position',             [0.04, 0.08, 0.15, 0.2],...
                        'parent',               uipvr,...
                        'style',                'text',...
                        'horizontalAlignment',  'left',...
                        'string',               'End:'); 

        pmheg = uicontrol('units',                'normalized',...
                          'position',             [0.2, 0.08, 0.30, 0.2],...
                          'parent',               uipvr,...
                          'style',                'edit',...
                          'background',           [1 1 1],...
                          'Interruptible',        'off',...
                          'horizontalAlignment',  'left',...
                          'enable',               enable,...
                          'string',               finish,...
                          'callback',             @gui.setEndGraph);      
        gui.editBox2 = pmheg;
                      
        % The text above the auto/manual radiobuttons    
        %----------------------------------------------------------
        uicontrol(...
                        'units',                'normalized',...
                        'position',             [0.55, 0.64, 0.15, 0.2],...
                        'parent',               uipvr,...
                        'style',                'text',...
                        'string',               'Auto');

        uicontrol(...
                        'units',                'normalized',...
                        'position',             [0.70, 0.64, 0.15, 0.2],...
                        'parent',               uipvr,...
                        'style',                'text',...
                        'string',               'Manual'); 

        % Create the radio button group to select if the start
        % graph should be set manually or automatic
        %----------------------------------------------------------
        uibg1 = uibuttongroup('parent',              uipvr,...
                              'title',               '',...
                              'borderType',          'none',...
                              'Interruptible',       'off',...
                              'busyAction',          'cancel',...
                              'units',               'normalized',...
                              'position',            [0.55, 0.36, 0.30, 0.2],...
                              'SelectionChangeFcn',  {@gui.enableEditDates,'startGraph'}); 

        % Make a radio button for each type  
        uicontrol(...
                          'units',              'normalized',...
                          'position',           [0.22,0,0.25,1],...
                          'parent',             uibg1,...
                          'style',              'radiobutton',...
                          'tag',                'auto',...
                          'string',             '',...
                          'value',              ~valueR);          

        uicontrol(...
                          'units',              'normalized',...
                          'position',           [0.72,0,0.25,1],...
                          'parent',             uibg1,...
                          'style',              'radiobutton',...
                          'tag',                'manual',...
                          'string',             '',...
                          'value',              valueR);  

        % Create the radio button group to select if the end
        % graph should be set manually or automatic
        %----------------------------------------------------------
        uibg2 = uibuttongroup('parent',              uipvr,...
                              'title',               '',...
                              'borderType',          'none',...
                              'Interruptible',       'off',...
                              'busyAction',          'cancel',...
                              'units',               'normalized',...
                              'position',            [0.55, 0.08, 0.30, 0.2],...
                              'SelectionChangeFcn',  {@gui.enableEditDates,'endGraph'}); 

        % Make a radio button for each type                 
        uicontrol(...
                          'units',              'normalized',...
                          'position',           [0.22,0,0.25,1],...
                          'parent',             uibg2,...
                          'style',              'radiobutton',...
                          'tag',                'auto',...
                          'string',             '',...
                          'value',              ~valueRE);          

        uicontrol(...
                          'units',              'normalized',...
                          'position',           [0.72,0,0.25,1],...
                          'parent',             uibg2,...
                          'style',              'radiobutton',...
                          'tag',                'manual',...
                          'string',             '',...
                          'value',              valueRE);             

    elseif type == 3
        
        firstPanelStart = 1;
        
    else
        
        firstPanelStart = 0.75;
        
        % Scatter x-limits
        %----------------------------------------------------------
        uipvr = uipanel('parent',              uip,...
                        'title',               'X-Axis Limits',...
                        'units',               'normalized',...
                        'position',            [0.04, firstPanelStart, 0.92, 0.21]);

        % Add uicontrol elements to change the lower x-axis limit
        %----------------------------------------------------------
        if isempty(plotter.xLim) 
            enable  = 'off';
            valueR  = 0;
            xLimLow = '';
        elseif isnan(plotter.xLim(1))
            enable  = 'off';
            valueR  = 0;
            xLimLow = '';
        else
            enable  = 'on';
            valueR  = 1;
            xLimLow = num2str(plotter.xLim(1));
        end
        
        uicontrol(...
                        'units',                'normalized',...
                        'position',             [0.04, 0.36, 0.15, 0.2],...
                        'parent',               uipvr,...
                        'style',                'text',...
                        'horizontalAlignment',  'left',...
                        'string',               'Lower:'); 

        pmhsg = uicontrol('units',                'normalized',...
                          'position',             [0.2, 0.36, 0.30, 0.2],...
                          'parent',               uipvr,...
                          'style',                'edit',...
                          'background',           [1 1 1],...
                          'Interruptible',        'off',...
                          'horizontalAlignment',  'right',...
                          'enable',               enable,...
                          'string',               xLimLow,...
                          'callback',             {@gui.setXLim,'lower'});  
        gui.editBox1 = pmhsg;
                      
        % Add uicontrol elements to change the upper x-axis limit
        %----------------------------------------------------------
        if isempty(plotter.xLim) 
            enable   = 'off';
            valueRE  = 0;
            xLimHigh = '';
        elseif isnan(plotter.xLim(2))
            enable   = 'off';
            valueRE   = 0;
            xLimHigh = '';
        else
            enable   = 'on';
            valueRE  = 1;
            xLimHigh = num2str(plotter.xLim(2));
        end
        
        uicontrol(...
                        'units',                'normalized',...
                        'position',             [0.04, 0.08, 0.15, 0.2],...
                        'parent',               uipvr,...
                        'style',                'text',...
                        'horizontalAlignment',  'left',...
                        'string',               'Upper:'); 

        pmheg = uicontrol('units',                'normalized',...
                          'position',             [0.2, 0.08, 0.30, 0.2],...
                          'parent',               uipvr,...
                          'style',                'edit',...
                          'background',           [1 1 1],...
                          'Interruptible',        'off',...
                          'horizontalAlignment',  'right',...
                          'enable',               enable,...
                          'string',               xLimHigh,...
                          'callback',             {@gui.setXLim,'upper'});      
        gui.editBox2 = pmheg;
                      
        % The text above the auto/manual radiobuttons    
        %----------------------------------------------------------
        uicontrol(...
                        'units',                'normalized',...
                        'position',             [0.55, 0.64, 0.15, 0.2],...
                        'parent',               uipvr,...
                        'style',                'text',...
                        'string',               'Auto');

        uicontrol(...
                        'units',                'normalized',...
                        'position',             [0.70, 0.64, 0.15, 0.2],...
                        'parent',               uipvr,...
                        'style',                'text',...
                        'string',               'Manual'); 

        % Create the radio button group to select if the start
        % graph should be set manually or automatic
        %----------------------------------------------------------
        uibg1 = uibuttongroup('parent',              uipvr,...
                              'title',               '',...
                              'borderType',          'none',...
                              'Interruptible',       'off',...
                              'busyAction',          'cancel',...
                              'units',               'normalized',...
                              'position',            [0.55, 0.36, 0.30, 0.2],...
                              'SelectionChangeFcn',  {@gui.enableEditXLim,'lower'}); 

        % Make a radio button for each type  
        uicontrol(...
                          'units',              'normalized',...
                          'position',           [0.22,0,0.25,1],...
                          'parent',             uibg1,...
                          'style',              'radiobutton',...
                          'tag',                'auto',...
                          'string',             '',...
                          'value',              ~valueR);          

        uicontrol(...
                          'units',              'normalized',...
                          'position',           [0.72,0,0.25,1],...
                          'parent',             uibg1,...
                          'style',              'radiobutton',...
                          'tag',                'manual',...
                          'string',             '',...
                          'value',              valueR);    

        % Create the radio button group to select if the end
        % graph should be set manually or automatic
        %----------------------------------------------------------
        uibg2 = uibuttongroup('parent',              uipvr,...
                              'title',               '',...
                              'borderType',          'none',...
                              'Interruptible',       'off',...
                              'busyAction',          'cancel',...
                              'units',               'normalized',...
                              'position',            [0.55, 0.08, 0.30, 0.2],...
                              'SelectionChangeFcn',  {@gui.enableEditXLim,'upper'}); 

        % Make a radio button for each type                 
        uicontrol(...
                          'units',              'normalized',...
                          'position',           [0.22,0,0.25,1],...
                          'parent',             uibg2,...
                          'style',              'radiobutton',...
                          'tag',                'auto',...
                          'string',             '',...
                          'value',              ~valueRE);          

        uicontrol(...
                          'units',              'normalized',...
                          'position',           [0.72,0,0.25,1],...
                          'parent',             uibg2,...
                          'style',              'radiobutton',...
                          'tag',                'manual',...
                          'string',             '',...
                          'value',              valueRE);  
        
    end
    
    
    % Other properties
    %--------------------------------------------------------------
    startPopX = 0.3;
    widthPop  = 0.35;
    heightPop = 0.045;
    startTX   = 0.04;
    widthT    = widthPop - startTX*2;
    heightT   = 0.04;
%     widthB    = 1 - startPopX - widthPop - startTX*2;
%     startB    = startPopX + widthPop + startTX;
    kk        = 9;
    spaceYPop = (firstPanelStart - heightPop*kk)/(kk + 1);
    extra     = -(heightPop - heightT);
    
    % X-Axis Scale
    %--------------------------------------------------------------
    if ~any(strcmpi(gui.plotter.plotType,{'image','donut'}))
    
        uicontrol(...
                  'units',                  'normalized',...
                  'position',               [startTX, heightPop*(kk-1) + spaceYPop*kk + extra, widthT, heightT],...
                  'parent',                 uip,...
                  'style',                  'text',...
                  'horizontalAlignment',    'left',...
                  'string',                 'X-Axis Scale');


        if strcmp(plotter.plotType,'scatter')

            var  = plotter.scatterVariables{1};
            data = plotter.DB.window('','',var);
            data = data.double();
            ind  = data < 1;
            if any(ind)
                strings = {'linear'};
            else
                strings = {'linear','log'};
            end

        else
            strings = {'linear'};
        end
        scale   = plotter.xScale; 
        value   = find(strcmpi(scale,strings));
        if isempty(value)
            value          = 1;
            plotter.xScale = scale;
        end

        uicontrol(...
                  'units',          'normalized',...
                  'position',       [startPopX, heightPop*(kk-1) + spaceYPop*kk, widthPop, heightPop],...
                  'parent',         uip,...
                  'background',     [1 1 1],...
                  'style',          'popupmenu',...
                  'Interruptible',  'off',...
                  'string',         strings,...
                  'value',          value,....
                  'callback',       @gui.setXAxisScale);

        % x-axis label location
        %--------------------------------------------------------------
        kk = kk - 1;
        uicontrol(...
                  'units',                  'normalized',...
                  'position',               [startTX, heightPop*(kk-1) + spaceYPop*kk + extra, widthT, heightT],...
                  'parent',                 uip,...
                  'style',                  'text',...
                  'horizontalAlignment',    'left',...
                  'string',                 'X-Axis Label Location');


        if isscalar(plotter.xTickLocation)
            strings = {'bottom','top','baseline'};
        else
            strings = {'bottom','top'};
        end
        loc   = plotter.xTickLabelLocation; 
        value = find(strcmpi(loc,strings));
        if isempty(value)
            value = 1;
        end

        uicontrol(...
                  'units',          'normalized',...
                  'position',       [startPopX, heightPop*(kk-1) + spaceYPop*kk, widthPop, heightPop],...
                  'parent',         uip,...
                  'background',     [1 1 1],...
                  'style',          'popupmenu',...
                  'Interruptible',  'off',...
                  'string',         strings,...
                  'value',          value,....
                  'callback',       @gui.setXAxisLabelLocation);

        % x-axis label alignment 
        %--------------------------------------------------------------
        kk = kk - 1;
        uicontrol(...
                  'units',                  'normalized',...
                  'position',               [startTX, heightPop*(kk-1) + spaceYPop*kk + extra, widthT, heightT],...
                  'parent',                 uip,...
                  'style',                  'text',...
                  'horizontalAlignment',    'left',...
                  'string',                 'X-Axis Label Alignment');


        strings = {'normal','middle'};
        align   = plotter.xTickLabelAlignment; 
        value   = find(strcmpi(align,strings));
        if isempty(value)
            value = 1;
        end

        uicontrol(...
                  'units',          'normalized',...
                  'position',       [startPopX, heightPop*(kk-1) + spaceYPop*kk, widthPop, heightPop],...
                  'parent',         uip,...
                  'background',     [1 1 1],...
                  'style',          'popupmenu',...
                  'Interruptible',  'off',...
                  'string',         strings,...
                  'value',          value,...
                  'callback',       @gui.setXAxisLabelAlignment);

        % x-axis tick location 
        %--------------------------------------------------------------
        kk = kk - 1;
        uicontrol(...
                  'units',                  'normalized',...
                  'position',               [startTX, heightPop*(kk-1) + spaceYPop*kk + extra, widthT, heightT],...
                  'parent',                 uip,...
                  'style',                  'text',...
                  'horizontalAlignment',    'left',...
                  'string',                 'X-Axis Tick Location');


        strings = {'bottom','top'};%,'number'
        loc     = plotter.xTickLocation; 
        value   = find(strcmp(loc,strings));
        if isempty(value)
            value = 1;
        end

        uicontrol(...
                  'units',          'normalized',...
                  'position',       [startPopX, heightPop*(kk-1) + spaceYPop*kk, widthPop, heightPop],...
                  'parent',         uip,...
                  'background',     [1 1 1],...
                  'style',          'popupmenu',...
                  'Interruptible',  'off',...
                  'string',         strings,...
                  'value',          value,....
                  'callback',       @gui.setXAxisTickLocation);      

        % X-Axis Tick Rotation
        %--------------------------------------------------------------
        kk = kk - 1;
        uicontrol(...
                  'units',                  'normalized',...
                  'position',               [startTX, heightPop*(kk-1) + spaceYPop*kk + extra, widthT, heightT],...
                  'parent',                 uip,...
                  'style',                  'text',...
                  'horizontalAlignment',    'left',...
                  'string',                 'X-Axis Tick Rotation');


        number = plotter.xTickRotation;
        string = num2str(number); 

        uicontrol(...
                  'units',                  'normalized',...
                  'position',               [startPopX, heightPop*(kk-1) + spaceYPop*kk, widthPop, heightPop],...
                  'parent',                 uip,...
                  'background',             [1 1 1],...
                  'style',                  'edit',...
                  'horizontalAlignment',    'right',...
                  'Interruptible',          'off',...
                  'string',                 string,...
                  'callback',               @gui.setXAxisTickRotation);      

        % x-axis spacing 
        %--------------------------------------------------------------
        if type ~= 3

            kk = kk - 1;
            uicontrol(...
                      'units',                  'normalized',...
                      'position',               [startTX, heightPop*(kk-1) + spaceYPop*kk + extra, widthT, heightT],...
                      'parent',                 uip,...
                      'style',                  'text',...
                      'horizontalAlignment',    'left',...
                      'string',                 'X-Axis Tick Spacing');


            if isa(plotter,'nb_graph_cs')
                value = plotter.xSpacing;
            else
                value = plotter.spacing;
            end
            str   = int2str(value);

            uicontrol(...
                      'units',                  'normalized',...
                      'position',               [startPopX, heightPop*(kk-1) + spaceYPop*kk, widthPop, heightPop],...
                      'parent',                 uip,...
                      'background',             [1 1 1],...
                      'style',                  'edit',...
                      'horizontalAlignment',    'right',...
                      'Interruptible',          'off',...
                      'string',                 str,...
                      'callback',               @gui.setXAxisSpacing); 

        end

        % x-axis add space
        %--------------------------------------------------------------
        kk = kk - 1;
        uicontrol(...
                  'units',                  'normalized',...
                  'position',               [startTX, heightPop*(kk-1) + spaceYPop*kk + extra, widthT, heightT],...
                  'parent',                 uip,...
                  'style',                  'text',...
                  'horizontalAlignment',    'left',...
                  'string',                 'X-Axis Add Space');


        value  = plotter.addSpace;
        str1   = int2str(value(1));
        str2   = int2str(value(2));
        bSpace = 0.01;

        uicontrol(...
                  'units',                  'normalized',...
                  'position',               [startPopX, heightPop*(kk-1) + spaceYPop*kk, widthPop/2 - bSpace/2, heightPop],...
                  'parent',                 uip,...
                  'background',             [1 1 1],...
                  'style',                  'edit',...
                  'horizontalAlignment',    'right',...
                  'Interruptible',          'off',...
                  'string',                 str1,...
                  'callback',               {@gui.setAddSpace,1});

        uicontrol(...
                  'units',                  'normalized',...
                  'position',               [startPopX + widthPop/2 + bSpace, heightPop*(kk-1) + spaceYPop*kk, widthPop/2 - bSpace/2, heightPop],...
                  'parent',                 uip,...
                  'background',             [1 1 1],...
                  'style',                  'edit',...
                  'horizontalAlignment',    'right',...
                  'Interruptible',          'off',...
                  'string',                 str2,...
                  'callback',               {@gui.setAddSpace,2}); 

        % X-Axis Tick Frequency
        %--------------------------------------------------------------     
        if type == 1 && isprop(plotter,'xTickFrequency')


            kk = kk - 1;
            uicontrol(...
                      'units',                  'normalized',...
                      'position',               [startTX, heightPop*(kk-1) + spaceYPop*kk + extra, widthT, heightT],...
                      'parent',                 uip,...
                      'style',                  'text',...
                      'horizontalAlignment',    'left',...
                      'string',                 'X-Axis Tick Frequency');

            listFreq   = [365,52,12,4,2,1];
            stringFreq = {'Daily','Weekly','Monthly','Quarterly','Semiannually','Yearly'};
            freq       = plotter.DB.frequency; 
            strings    = stringFreq(listFreq <= freq);
            value      = find(strcmpi(plotter.xTickFrequency,strings));
            if isempty(value)
                value = 1;
            end

            uicontrol(...
                      'units',          'normalized',...
                      'position',       [startPopX, heightPop*(kk-1) + spaceYPop*kk, widthPop, heightPop],...
                      'parent',         uip,...
                      'background',     [1 1 1],...
                      'style',          'popupmenu',...
                      'Interruptible',  'off',...
                      'string',         strings,...
                      'value',          value,....
                      'callback',       @gui.setXTickFrequency);

        end 

        % X-Axis Tick Start Date/obs
        %--------------------------------------------------------------
        if (type == 1 || type == 4) && isprop(plotter,'xTickStart') % not scatter plot and not nb_graph_cs and the variablesToPlotX property of nb_graph_data is not used

            kk = kk - 1;
            uicontrol(...
                      'units',                  'normalized',...
                      'position',               [startTX, heightPop*(kk-1) + spaceYPop*kk + extra, widthT, heightT],...
                      'parent',                 uip,...
                      'style',                  'text',...
                      'horizontalAlignment',    'left',...
                      'string',                 'X-Axis Tick Start Obs');

            % We want to return local variables if used
            plotter.setSpecial('returnLocal',1);
            obs = plotter.xTickStart;
            plotter.setSpecial('returnLocal',0);

            if isempty(obs)
                obs = '';
            else
                obs = toString(obs);
            end

            gui.xTickStart = uicontrol(...
                      'units',                  'normalized',...
                      'position',               [startPopX, heightPop*(kk-1) + spaceYPop*kk, widthPop, heightPop],...
                      'parent',                 uip,...
                      'background',             [1 1 1],...
                      'style',                  'edit',...
                      'horizontalAlignment',    'left',...
                      'Interruptible',          'off',...
                      'string',                 obs,...
                      'callback',               @gui.setXAxisTickStartDate); 

        end
        
    end
    
    % Types to plot
    %--------------------------------------------------------------
    if isa(plotter,'nb_graph_cs') && ~strcmpi(plotter.plotType,'scatter') && ~strcmpi(plotter.plotType,'pie')
    
        % Get all the types plotted
        typesOfData = plotter.DB.types;
        ind         = ismember(typesOfData,plotter.typesToPlot);
        indS        = size(ind,2);
        indC        = cell(indS,1);
        for ii = 1:indS
            indC{ii} = ind(ii);
        end
        
        if strcmpi(plotter.plotType,'grouped') && strcmpi(plotter.barOrientation,'horizontal') && ~isempty(plotter.variablesToPlotRight)
            
            if isempty(plotter.typesToPlotRight)
                plotter.typesToPlotRight = plotter.typesToPlot;
            end
            ind  = ismember(typesOfData,plotter.typesToPlotRight);
            indS = size(ind,2);
            indR = cell(indS,1);
            for ii = 1:indS
                indR{ii} = ind(ii);
            end
            tableData = [typesOfData',indC,indR];
            colNames  = {'Types','Plot','Plot (right)'};
            colEdit   = [false,true,true];
            colForm   = {'char','logical','logical'};
        else
            tableData = [typesOfData',indC];
            colNames  = {'Types','Plot'};
            colEdit   = [false,true];
            colForm   = {'char','logical'};
        end
        
        % Create table with types options
        %-------------------------------------------------------------- 
        gui.table = nb_uitable(uip,...
                        'units',                'normalized',...
                        'position',             [startTX, 0.04, 0.92, 1 - heightPop*6 - spaceYPop*7 - 0.04],...
                        'data',                 tableData,...
                        'columnName',           colNames,...
                        'columnFormat',         colForm,...
                        'columnEdit',           colEdit,...
                        'cellEditCallback',     @gui.cellEdit);
              
    end
    
end
