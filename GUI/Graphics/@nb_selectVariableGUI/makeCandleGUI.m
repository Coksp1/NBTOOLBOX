function makeCandleGUI(gui)
% Syntax:
%
% makeCandleGUI(gui)
%
% Description:
%
% Part of DAG.
% 
% Written by Kenneth Sæterhagen Paulsen

% Copyright (c) 2021, Kenneth Sæterhagen Paulsen

    % Get plotter object
    plotter = gui.plotter;
    parent  = gui.plotter.parent;

    % Create the main window
    %--------------------------------------------------------------
    if isa(parent,'nb_GUI')
        name = [parent.guiName ': Select Variable'];
    else
        name = 'Select Variable';
    end
    
    currentMonitor    = nb_getCurrentMonitor();
    defaultBackground = get(0,'defaultUicontrolBackgroundColor');
    f    = figure('visible',        'off',...
                  'units',          'characters',...
                  'position',       [40   15  85.5   31.5],...
                  'Color',          defaultBackground,...
                  'name',           name,...
                  'numberTitle',    'off',...
                  'dockControls',   'off',...
                  'menuBar',        'None',...
                  'toolBar',        'None',...
                  'resize',         'off',...
                  'windowStyle',    'modal');                    
    gui.figureHandle = f;
    nb_moveFigureToMonitor(f,currentMonitor,'center');
    
    % Create panel
    %--------------------------------------------------------------
    startX    = 0.04;
    startYB   = 0.04;
    
    gui.uip = uipanel('parent',              gui.figureHandle,...
                      'title',               'Candle Properties',...
                      'units',               'normalized',...
                      'tag',                 'line',...
                      'position',            [startX, startYB, 1 - startX*2, 1 - startYB*2]);

    startPopX = 0.3;
    widthPop  = 0.35;
    heightPop = 0.08;
    startTX   = 0.04;
    widthT    = widthPop - startTX*2;
    heightT   = 0.053;
    widthB    = 1 - startPopX - widthPop - startTX*2;
    startB    = startPopX + widthPop + startTX;
    spaceYPop = (1 - heightPop*10)/11;
    extra     = (heightPop - heightT)/2;
    kk        = 10;
    
    % Open
    %--------------------------------------------------------------
    uicontrol(...
              'units',                  'normalized',...
              'position',               [startTX, heightPop*(kk-1) + spaceYPop*kk + extra, widthT, heightT],...
              'parent',                 gui.uip,...
              'style',                  'text',...
              'horizontalAlignment',    'left',...
              'string',                 'Open');


    vars = [{''},plotter.DB.variables];          
    ind  = find(strcmpi('open',plotter.candleVariables(1:2:end)),1,'last');   
    if isempty(ind)
        value = 1;
    else
        var   = plotter.candleVariables{ind*2};
        value = find(strcmpi(var,plotter.DB.variables),1) + 1;
    end
    
    pop1 = uicontrol(...
              'units',          'normalized',...
              'position',       [startPopX, heightPop*(kk-1) + spaceYPop*kk, widthPop, heightPop],...
              'parent',         gui.uip,...
              'background',     [1 1 1],...
              'style',          'popupmenu',...
              'Interruptible',  'off',...
              'string',         vars,...
              'value',          value,....
              'callback',       @gui.selectOpenVariable);
    gui.popupmenu1 = pop1;
    
    % Close
    %--------------------------------------------------------------
    kk = kk - 1;
    uicontrol(...
              'units',                  'normalized',...
              'position',               [startTX, heightPop*(kk-1) + spaceYPop*kk + extra, widthT, heightT],...
              'parent',                 gui.uip,...
              'style',                  'text',...
              'horizontalAlignment',    'left',...
              'string',                 'Close');


    vars = [{''},plotter.DB.variables];          
    ind  = find(strcmpi('close',plotter.candleVariables(1:2:end)),1,'last');   
    if isempty(ind)
        value = 1;
    else
        var   = plotter.candleVariables{ind*2};
        value = find(strcmpi(var,plotter.DB.variables),1) + 1;
    end
    
    pop2 = uicontrol(...
              'units',          'normalized',...
              'position',       [startPopX, heightPop*(kk-1) + spaceYPop*kk, widthPop, heightPop],...
              'parent',         gui.uip,...
              'background',     [1 1 1],...
              'style',          'popupmenu',...
              'Interruptible',  'off',...
              'string',         vars,...
              'value',          value,....
              'callback',       @gui.selectCloseVariable);
    gui.popupmenu2 = pop2;
    
    % High
    %--------------------------------------------------------------
    kk = kk - 1;
    uicontrol(...
              'units',                  'normalized',...
              'position',               [startTX, heightPop*(kk-1) + spaceYPop*kk + extra, widthT, heightT],...
              'parent',                 gui.uip,...
              'style',                  'text',...
              'horizontalAlignment',    'left',...
              'string',                 'High');


    vars = [{''},plotter.DB.variables];          
    ind  = find(strcmpi('high',plotter.candleVariables(1:2:end)),1,'last');   
    if isempty(ind)
        value = 1;
    else
        var   = plotter.candleVariables{ind*2};
        value = find(strcmpi(var,plotter.DB.variables),1) + 1;
    end
    
    pop3 = uicontrol(...
              'units',          'normalized',...
              'position',       [startPopX, heightPop*(kk-1) + spaceYPop*kk, widthPop, heightPop],...
              'parent',         gui.uip,...
              'background',     [1 1 1],...
              'style',          'popupmenu',...
              'Interruptible',  'off',...
              'string',         vars,...
              'value',          value,....
              'callback',       @gui.selectHighVariable);
    gui.popupmenu3 = pop3;
    
    % Low
    %--------------------------------------------------------------
    kk = kk - 1;
    uicontrol(...
              'units',                  'normalized',...
              'position',               [startTX, heightPop*(kk-1) + spaceYPop*kk + extra, widthT, heightT],...
              'parent',                 gui.uip,...
              'style',                  'text',...
              'horizontalAlignment',    'left',...
              'string',                 'Low');


    vars = [{''},plotter.DB.variables];          
    ind  = find(strcmpi('low',plotter.candleVariables(1:2:end)),1,'last');   
    if isempty(ind)
        value = 1;
    else
        var   = plotter.candleVariables{ind*2};
        value = find(strcmpi(var,plotter.DB.variables),1) + 1;
    end
    
    pop4 = uicontrol(...
              'units',          'normalized',...
              'position',       [startPopX, heightPop*(kk-1) + spaceYPop*kk, widthPop, heightPop],...
              'parent',         gui.uip,...
              'background',     [1 1 1],...
              'style',          'popupmenu',...
              'Interruptible',  'off',...
              'string',         vars,...
              'value',          value,....
              'callback',       @gui.selectLowVariable);
    gui.popupmenu4 = pop4;
    
    % Indicator
    %--------------------------------------------------------------
    kk = kk - 1;
    uicontrol(...
              'units',                  'normalized',...
              'position',               [startTX, heightPop*(kk-1) + spaceYPop*kk + extra, widthT, heightT],...
              'parent',                 gui.uip,...
              'style',                  'text',...
              'horizontalAlignment',    'left',...
              'string',                 'Indicator');


    vars = [{''},plotter.DB.variables];          
    ind  = find(strcmpi('indicator',plotter.candleVariables(1:2:end)),1,'last');   
    if isempty(ind)
        value = 1;
    else
        var   = plotter.candleVariables{ind*2};
        value = find(strcmpi(var,plotter.DB.variables),1) + 1;
    end
    
    pop5 = uicontrol(...
              'units',          'normalized',...
              'position',       [startPopX, heightPop*(kk-1) + spaceYPop*kk, widthPop, heightPop],...
              'parent',         gui.uip,...
              'background',     [1 1 1],...
              'style',          'popupmenu',...
              'Interruptible',  'off',...
              'string',         vars,...
              'value',          value,....
              'callback',       @gui.selectIndicatorVariable);
    gui.popupmenu5 = pop5;
    
    % Width
    %--------------------------------------------------------------
    kk = kk - 1;
    uicontrol(...
              'units',                  'normalized',...
              'position',               [startTX, heightPop*(kk-1) + spaceYPop*kk + extra, widthT, heightT],...
              'parent',                 gui.uip,...
              'style',                  'text',...
              'horizontalAlignment',    'left',...
              'string',                 'Width');

    ed1 = uicontrol(...
              'units',              'normalized',...
              'position',           [startPopX, heightPop*(kk-1) + spaceYPop*kk, widthPop, heightPop],...
              'parent',             gui.uip,...
              'background',         [1 1 1],...
              'style',              'edit',...
              'Interruptible',      'off',...
              'horizontalAlignment','right',...
              'string',             num2str(plotter.candleWidth),...
              'callback',           @gui.setCandleWidth);
    gui.editbox1 = ed1;
    
    % Color
    %--------------------------------------------------------------
    kk = kk - 1;
    uicontrol(...
          'units',                  'normalized',...
          'position',               [startTX, heightPop*(kk-1) + spaceYPop*kk + extra, widthT, heightT],...
          'parent',                 gui.uip,...
          'style',                  'text',...
          'horizontalAlignment',    'left',...
          'string',                 'Candle Color'); 

    % Locate or give default color to candle 
    endc = nb_getGUIColorList(gui,parent);
    col  = plotter.colors;
    ind  = find(strcmpi('candle',col),1,'last');
    if isempty(ind)
        % Get the prefered default color
        if isempty(col)
            value  = 1;
        end
        plotter.colors = [col,'candle',endc{value}];
    else        
        % Locate the selected color in the color list
        colorTemp = col{ind + 1};
        value     = nb_findColor(colorTemp,endc);
        if value == 0
            [endc,value] = nb_addColor(gui,parent,endc,colorTemp);
        end
    end
    
    % Using html coding to get the background of the 
    % listbox colored 
    colors = nb_selectVariableGUI.htmlColors(endc);

    pop6 = uicontrol(...
              'units',          'normalized',...
              'position',       [startPopX, heightPop*(kk-1) + spaceYPop*kk, widthPop, heightPop],...
              'parent',         gui.uip,...
              'background',     [1 1 1],...
              'style',          'popupmenu',...
              'Interruptible',  'off',...
              'string',         colors,...
              'value',          value,....
              'callback',       @gui.selectColor);
    gui.popupmenu6 = pop6;

    def1 = uicontrol(...
              'units',          'normalized',...
              'position',       [startB, heightPop*(kk-1) + spaceYPop*kk, widthB, heightPop],...
              'parent',         gui.uip,...
              'style',          'pushbutton',...
              'busyAction',     'cancel',...
              'Interruptible',  'off',...
              'string',         'Define'); 
          
    % Indicator Color
    %--------------------------------------------------------------
    kk = kk - 1;
    uicontrol(...
          'units',                  'normalized',...
          'position',               [startTX, heightPop*(kk-1) + spaceYPop*kk + extra, widthT, heightT],...
          'parent',                 gui.uip,...
          'style',                  'text',...
          'horizontalAlignment',    'left',...
          'string',                 'Indicator Color'); 
  
    % Locate the selected color in the color list
    endc      = nb_getGUIColorList(gui,parent);
    colorTemp = plotter.candleIndicatorColor;
    value     = nb_findColor(colorTemp,endc);
    if value == 0
        [endc,value] = nb_addColor(gui,parent,endc,colorTemp);
    end
    
    % Using html coding to get the background of the 
    % listbox colored 
    colors = nb_selectVariableGUI.htmlColors(endc);
    
    pop7 = uicontrol(...
              'units',          'normalized',...
              'position',       [startPopX, heightPop*(kk-1) + spaceYPop*kk, widthPop, heightPop],...
              'parent',         gui.uip,...
              'background',     [1 1 1],...
              'style',          'popupmenu',...
              'Interruptible',  'off',...
              'string',         colors,...
              'value',          value,....
              'callback',       @gui.setIndicatorColor);
    gui.popupmenu7 = pop7;

    def2 = uicontrol(...
              'units',          'normalized',...
              'position',       [startB, heightPop*(kk-1) + spaceYPop*kk, widthB, heightPop],...
              'parent',         gui.uip,...
              'style',          'pushbutton',...
              'Interruptible',  'off',...
              'busyAction',     'cancel',...
              'string',         'Define');       

    % Assign define color callbacks
    set(def1,'callback',{@nb_setDefinedColor,gui,pop6,pop7});
    set(def2,'callback',{@nb_setDefinedColor,gui,pop6,pop7})
          
    % Idicator Line Style 
    %--------------------------------------------------------------
    kk = kk - 1;
    uicontrol(...
              'units',                  'normalized',...
              'position',               [startTX, heightPop*(kk-1) + spaceYPop*kk + extra, widthT, heightT],...
              'parent',                 gui.uip,...
              'style',                  'text',...
              'horizontalAlignment',    'left',...
              'string',                 'Indicator Line Style');


    lineStyles = {'-','--',':','-.','none'};         
    value      = find(strcmp(plotter.candleIndicatorLineStyle,lineStyles),1);

    pop8 = uicontrol(...
              'units',          'normalized',...
              'position',       [startPopX, heightPop*(kk-1) + spaceYPop*kk, widthPop, heightPop],...
              'parent',         gui.uip,...
              'background',     [1 1 1],...
              'style',          'popupmenu',...
              'Interruptible',  'off',...
              'string',         lineStyles,...
              'value',          value,....
              'callback',       @gui.selectIndicatorLineStyle);
    gui.popupmenu8 = pop8;

    % Indicator Marker type
    kk = kk - 1; 
   
    uicontrol('units',                  'normalized',...
              'position',               [startTX, heightPop*(kk-1) + spaceYPop*kk + extra, widthT, heightT],...
              'parent',                 gui.uip,...
              'style',                  'text',...
              'horizontalAlignment',    'left',...
              'string',                 'Indicator Marker');

    markers = {'none','+','o','*','.','x','square','diamond','^','v','>','<','pentagram','hexagram'};          
    value   = find(strcmp(plotter.candleMarker,markers),1);      
          
    pop9 = uicontrol(...
              'units',          'normalized',...
              'position',       [startPopX, heightPop*(kk-1) + spaceYPop*kk, widthPop, heightPop],...
              'parent',         gui.uip,...
              'background',     [1 1 1],...
              'style',          'popupmenu',...
              'Interruptible',  'off',...
              'string',         markers,...
              'value',          value,....
              'callback',       @gui.selectIndicatorMarker);
    gui.popupmenu9 = pop9;

    % Make the GUI visible.
    %------------------------------------------------------
    set(f,'Visible','on');

end
